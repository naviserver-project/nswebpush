package require tcltest
package require json

#
# For testing purposes, we use the module source directory, the place
# where "make test" is to be executed. Furthermore, we use for testing
# always the same key pair, which is taken from the demo directory.
#
set scriptDir [pwd]/..
source $scriptDir/webpush-procs.tcl
ns_log notice "script $scriptDir/webpush.tcl was loaded"

set ::vapidCertPath $scriptDir/demo

#
# This is the endpoint this script sends 3 notifications to for testing
#
set ::testEndpoint {
    {"endpoint":"https://fcm.googleapis.com/fcm/send/d9IxzALjkyU:APA91bFkfLpZ4H8TEaCel9OtfL0V1LCSOGg253Cb0829sSwfo2CcKt_neqG5mZy8fhhRoeYyj-3Ds8i3edWn06snJxOULw68QV0RQe6yOgJ7vF70LWvzVi2QP1ZxtBLwLLkbbfI62Yuj","expirationTime":null,"keys":{"p256dh":"BG8SsZZCcU-hqyygt5d3Ov39GEyFM6wixAJqz37KBdEibeSKwJZz_T3li6B1aktuYDMOA0fEqIhzzMLqGfQ3gNU","auth":"8O1T8AvRJcqA8UB3vMVCoA"}}
}

namespace eval webpush {
    namespace import ::tcltest::*

    ##########################################################################
    # testing dict transformation
    ##########################################################################

    test dictToJson-1.0 {} -body {
        # key and value of json are supposed to be quoted
        set d [dict create a b 1 4]
        set result [dictToJson $d]
        set d [dict create "a" b 1 "4"]
        append result [dictToJson $d]
        # whitespaces in keys/values should stay
        set d [dict create "a 1" a b "b 2"]
        append result [dictToJson $d]
    } -result {{"a":"b","1":"4"}{"a":"b","1":"4"}{"a 1":"a","b":"b 2"}}


    ##########################################################################
    # claim validation
    ##########################################################################

    test validateClaim-1.0 {} -body {
        set validMail {mailto:georg@test.com}
        # this is only a valid formatting, the endpoint does not exist
        set validEndpoint "https://updates.push.services.mozilla.com/wpush/v2/gAAAAABa6CXAoHisP"

        set claim [validateClaim [subst {sub $validMail exp 12345}] $validEndpoint]
        set exp [dict get $claim exp]
        set result [expr {[clock seconds] < $exp && $exp < [clock seconds] + 60*61*24}]

        set claim [validateClaim [subst {sub $validMail}] $validEndpoint]
        if {![catch {dict get $claim exp}]} {
            append result 1
        }

        set claim [validateClaim [subst {sub $validMail exp [expr {[clock seconds] + 60*60*27}]}] $validEndpoint]
        set exp [dict get $claim exp]
        append result [expr {[clock seconds] < $exp && $exp < [clock seconds] + 60*61*24}]
        set aud [dict get $claim aud]
        if {$aud eq "https://updates.push.services.mozilla.com"} {
            append result 1
        }
        # endpoint and 'aud' mismatch
        append result [catch {validateClaim [subst {sub $validMail aud "abc"}] $validEndpoint}]
    } -result {11111}


    ##########################################################################
    # Tests for webpush::send
    ##########################################################################

    test webpush-send-1.0 {various exceptions} -body {

        set validMail {mailto:georg@test.com}
        # this is only a valid formatting, the endpoint does not exist
        set validEndpoint {endpoint https://updates.push.services.mozilla.com/wpush/v2/gAAAAABa6CXAoHisP}
        set validPem $::vapidCertPath/prime256v1_key.pem

        # all wrong
        set result [catch {
            webpush::send -subscription a -data "" -claim "" -privateKeyPem "" -localKeyPath ""
        }]

        # missing private key
        append result [catch {webpush::send \
                                  -subscription $validEndpoint \
                                  -data "" \
                                  -claim [subst {sub $validMail}] \
                                  -privateKeyPem "" \
                                  -localKeyPath $::vapidCertPath}]

        # private key not a pem file
        append result [catch {webpush::send \
                                  -subscription $validEndpoint \
                                  -data "" \
                                  -claim [subst {sub $validMail}] \
                                  -privateKeyPem $::vapidCertPath/public_key.txt \
                                  -localKeyPath $::vapidCertPath}]

        # invalid email address
        append result [catch {webpush::send \
                                  -subscription $validEndpoint \
                                  -data "" \
                                  -claim {sub maito:testtest} \
                                  -privateKeyPem $validPem \
                                  -localKeyPath $::vapidCertPath}]

        # auth and p256dh missing in subscription for data bearing Webpush
        append result [catch {webpush::send \
                                  -subscription $validEndpoint \
                                  -data "testdata" \
                                  -claim [subst {sub $validMail}] \
                                  -privateKeyPem $validPem \
                                  -localKeyPath $::vapidCertPath}]

        # invalid GCM mode
        append result [catch {webpush::send \
                                  -subscription $validEndpoint \
                                  -data "" \
                                  -claim [subst {sub $validMail}] \
                                  -privateKeyPem $validPem \
                                  -localKeyPath $::vapidCertPath \
                                  -mode abcencoding}]
    } -result {111111}

    test webpush-send-1.1 {cannot connect} -body {
        set validMail {mailto:georg@test.com}
        # this is only a valid formatting, the endpoint does not exist
        set validEndpoint {endpoint https://updates.push.services.mozilla.com/wpush/v2/gAAAAABa6CXAoHisP}
        set validPem $::vapidCertPath/prime256v1_key.pem
        # all good (no data is ok) - expected result is error 404 cannot connect

        catch {webpush::send \
                   -subscription $validEndpoint \
                   -data "" \
                   -claim [subst {sub $validMail}] \
                   -privateKeyPem $validPem \
                   -localKeyPath $::vapidCertPath
        } msg opt
        set result [dict get $opt -errorcode]

        # all good (valid aud)
        catch {webpush::send \
                   -subscription $validEndpoint \
                   -data "" \
                   -claim [subst {sub $validMail aud "https://updates.push.services.mozilla.com/"}] \
                   -privateKeyPem $validPem \
                   -localKeyPath $::vapidCertPath
        } msg opt
        append result [dict get $opt -errorcode]

        # all good (valid exp)
        catch {webpush::send \
                   -subscription $validEndpoint \
                   -data "" \
                   -claim [subst {sub $validMail exp [expr {[clock seconds] + 60*120}]}] \
                   -privateKeyPem $validPem \
                   -localKeyPath $::vapidCertPath
        } msg opt
        append result [dict get $opt -errorcode]
    } -result {404404404}


    test webpush-send-1.2 {send successfully} -body {
        set epDict [::json::json2dict $::testEndpoint]
        set keys [dict get $epDict keys]
        set validEndpoint [subst {endpoint [dict get $epDict endpoint] auth [dict get $keys auth] p256dh [dict get $keys p256dh]}]
        set validClaim {sub mailto:georg@test.com}
        set validPem $::vapidCertPath/prime256v1_key.pem
        set result {}
        #ns_logctl severity Debug(task) on
        #ns_logctl severity Debug(request) on
        #ns_logctl severity Debug(driver) on
        #ns_logctl severity Debug on

        if {[webpush::send \
                 -subscription $validEndpoint \
                 -data "" \
                 -claim $validClaim \
                 -privateKeyPem $validPem \
                 -localKeyPath $::vapidCertPath \
                 -mode aesgcm \
                 -timeout 60] < 300} {
            lappend result 1
        }
        #ns_log notice "======================== 1 DONE"
        if {[webpush::send \
                 -subscription $validEndpoint \
                 -data "encrypted data received!" \
                 -claim $validClaim \
                 -privateKeyPem $validPem \
                 -localKeyPath $::vapidCertPath \
                 -mode aesgcm \
                 -timeout 60] < 300} {
            lappend result 1
        }
        #ns_log notice "======================== 2 DONE"
        if {[webpush::send \
                 -subscription $validEndpoint \
                 -data "aes128gcm data received!" \
                 -claim $validClaim \
                 -privateKeyPem  $validPem \
                 -localKeyPath $::vapidCertPath \
                 -mode aes128gcm \
                 -timeout 60] < 300} {
            lappend result 1
        }
        #ns_log notice "======================== 3 DONE"
        set result

    } -returnCodes {ok error} -result {1 1 1}


    ##########################################################################
    # PEM tests
    ##########################################################################

    test pem-1.0 {createTmpPrivateKeyPem} -body {
        set pemFile [createTmpPrivateKeyPem]
        if {[file exists $pemFile]} {
            set result 1
        }
    } -result {1}


    # input/output for encryption functions from node.js crypto library
    # see "test.js"
    test generateInfo-1.0 {} -body {
        set result [generateInfo aesgcm \
                        [ns_base64urldecode -binary BJkXi48PlCiNCs9dLggxXQ39bdi64agt_emycss5gsg5BYqOWwP5gnbmga7Rg1_tKvnu0c3InK0C850s1czzyBg] \
                        [ns_base64urldecode -binary BJZRgas6kMag9rP2X5oVVhGzPwwT24p103WKkPlB7jFTmYVA3QsuLBaSSxNO-UVU-0SjHo0uIsiNoFQRYLDt7cE]]
        set result [string map {"\n" {}} [ns_base64encode $result]]

    } -result {Q29udGVudC1FbmNvZGluZzogYWVzZ2NtAFAtMjU2AABBBJkXi48PlCiNCs9dLggxXQ39bdi64agt/emycss5gsg5BYqOWwP5gnbmga7Rg1/tKvnu0c3InK0C850s1czzyBgAQQSWUYGrOpDGoPaz9l+aFVYRsz8ME9uKddN1ipD5Qe4xU5mFQN0LLiwWkksTTvlFVPtEox6NLiLIjaBUEWCw7e3B}


    ##########################################################################
    # encryption tests
    ##########################################################################

    test encrypt-aesgcm-1.0 {
        createEncryptionKeyNonce for aesgcm
    } -body {
        set clientPubKey [ns_base64decode -binary BNvOAPaPCCfpNCMR4AccTffxD8YMQbfIBWieLxgZE1qgU+YVVT5mOD7CaRRqg5ykA7/f8jm2VuOPZLvHn0moHas=]
        set serverPubKey [ns_base64decode -binary BFzhXP5G5Pp5xmEfESPsd7L6N2oQZZypGd2tUR5diW9spzJFs5DXaUuM1iMVfZGunUhtHkyYjqPfcQ2bfzKzbeY=]
        set ikm [ns_base64decode -binary 4qL0g1tKiepxN01MPiRVjDAgC8PWwjlpFNccAS5rtvo=]
        set salt [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==]
        lassign [createEncryptionKeyNonce \
                     $clientPubKey \
                     $serverPubKey \
                     $ikm \
                     $salt \
                     aesgcm] key nonce
        list [ns_base64encode $key] [ns_base64encode $nonce]
    } -result {bwUz6s4vfAi5a9xGFBVRXg== n14o2v4+edg7+ggO}



    test encrypt-aesgcm-1.2 {
        full encryption aesgcm
    } -body {
        set auth   [ns_base64urldecode -binary 4LLU4S9l1S9IrPTsQZkPqw]
        set p256dh [ns_base64urldecode -binary BNvOAPaPCCfpNCMR4AccTffxD8YMQbfIBWieLxgZE1qgU-YVVT5mOD7CaRRqg5ykA7_f8jm2VuOPZLvHn0moHas]
        set salt   [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==]
        set result [encrypt -data "Push notification payload!" \
                        -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                        -auth $auth\
                        -p256dh $p256dh \
                        -salt $salt \
                        -mode aesgcm]
        #ns_log notice "obj(encrypt) [nsf::__db_get_obj $result]"
        #ns_log notice "encrypted [string length $result]"
        set result [string map {"\n" {}} [ns_base64encode $result]]
        catch {encrypt \
                   -data [string repeat A 4079] \
                   -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                   -auth $auth \
                   -p256dh $p256dh \
                   -salt $salt \
                   -mode aesgcm} errorMsg
        lappend result $errorMsg
    }  -match glob -result {*{data is too large, maximum is 4078 bytes!}*}

    test encrypt-aes128gcm-1.1 {
        createAes128gcmHeader for aes128gcm
    } -body {
        ns_base64urlencode [createAes128gcmHeader \
                                [ns_base64urldecode -binary I1BsxtFttlv3u_Oo94xnmw] \
                                ""]
    } -result {I1BsxtFttlv3u_Oo94xnmwAAEAAA}


    ##########################################################################
    # decryption tests
    ##########################################################################

    test decrypt-aesgcm-1.0 {
        full encrypt and decrypt roundtrip
        using aesgcm
    } -body {
        set data "Encryptiontest"
        # this is the client keypair
        set localPrivFn [createTmpPrivateKeyPem]
        set localPub    [ns_crypto::eckey pub -pem $localPrivFn -encoding binary]
        set auth        [ns_base64urldecode -binary 4LLU4S9l1S9IrPTsQZkPqw]
        set salt        [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==]

        # client public key iś the p256dh field in a subscription
        set encrypted [encrypt -data $data \
                           -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                           -auth $auth \
                           -p256dh $localPub \
                           -salt $salt \
                           -mode aesgcm]
        #ns_log notice "obj(encrypted) [nsf::__db_get_obj $encrypted]"

        set serverPubKey [ns_crypto::eckey pub -pem $::vapidCertPath/prime256v1_key.pem -encoding binary]

        set result [decrypt -encrData $encrypted \
                        -privateKeyPem $localPrivFn \
                        -auth $auth \
                        -serverPubKey $serverPubKey \
                        -salt $salt \
                        -mode aesgcm]
        set result
    } -cleanup {
        file delete $localPrivFn
    } -returnCodes {ok error} -result {Encryptiontest}

    test decrypt-aesgcm-1.1 {
        Full encrypt and decrypt with UTF-8 characters
        using aesgcm
    } -body {
        set data [encoding convertto utf-8 "test with UTF-8: äüö - 10 € and a black sun ☀"]
        # this is the client keypair
        set localPrivFn [createTmpPrivateKeyPem]
        set localPub    [ns_crypto::eckey pub -pem $localPrivFn -encoding binary]
        set auth        [ns_base64urldecode -binary 4LLU4S9l1S9IrPTsQZkPqw]
        set salt        [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==]

        # client public key iś the p256dh field in a subscription
        set encrypted [encrypt -data $data \
                           -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                           -auth $auth \
                           -p256dh $localPub \
                           -salt $salt \
                           -mode aesgcm]
        #ns_log notice "obj(encrypted) [nsf::__db_get_obj $encrypted]"

        set serverPubKey [ns_crypto::eckey pub -pem $::vapidCertPath/prime256v1_key.pem -encoding binary]

        set result [decrypt -encrData $encrypted \
                        -privateKeyPem $localPrivFn \
                        -auth $auth \
                        -serverPubKey $serverPubKey \
                        -salt $salt \
                        -mode aesgcm]
        set result [encoding convertfrom utf-8 $result]
    } -cleanup {
        file delete $localPrivFn
    } -returnCodes {ok error} -result {test with UTF-8: äüö - 10 € and a black sun ☀}


    test decrypt-aes128gcm-1.0  {
        full encrypt and decrypt roundtrip
        using aes128gcm
    } -body {
        set data "Encryptiontest"
        # this is the client keypair
        set localPrivFn [createTmpPrivateKeyPem]
        set localPub    [ns_crypto::eckey pub -pem $localPrivFn -encoding binary]
        set auth        [ns_base64urldecode -binary 4LLU4S9l1S9IrPTsQZkPqw]
        # client public key iś the p256dh field in a subscription
        set encrypted [encrypt -data $data \
                           -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                           -auth $auth \
                           -p256dh $localPub \
                           -salt [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==] \
                           -mode aes128gcm]

        set result [decrypt -encrData $encrypted \
                        -privateKeyPem $localPrivFn \
                        -auth $auth \
                        -mode aes128gcm]
    } -cleanup {
        file delete $localPrivFn
    } -result {Encryptiontest}

    test decrypt-aes128gcm-1.1  {
        full encrypt and decrypt roundtrip with UTF-8 characters
        using aes128gcm
    } -body {
        set data [encoding convertto utf-8 "test with UTF-8: äüö - 10 € and a black sun ☀"]

        # this is the client keypair
        set localPrivFn [createTmpPrivateKeyPem]
        set localPub    [ns_crypto::eckey pub -pem $localPrivFn -encoding binary]
        set auth        [ns_base64urldecode -binary 4LLU4S9l1S9IrPTsQZkPqw]
        # client public key iś the p256dh field in a subscription
        ns_log notice "obj(data) [nsf::__db_get_obj $data] string length [string length $data]"
        set encrypted [encrypt -data $data \
                           -privateKeyPem $::vapidCertPath/prime256v1_key.pem \
                           -auth $auth \
                           -p256dh $localPub \
                           -salt [ns_base64decode -binary WVGtEt/7tGKMNgqAeDvEPA==] \
                           -mode aes128gcm]
        ns_log notice "obj(encrypted) [nsf::__db_get_obj $encrypted] string length [string length $encrypted]"

        set result [decrypt -encrData $encrypted \
                        -privateKeyPem $localPrivFn \
                        -auth $auth \
                        -mode aes128gcm]
        set result [encoding convertfrom utf-8 $result]

    } -cleanup {
        file delete $localPrivFn
    } -result {test with UTF-8: äüö - 10 € and a black sun ☀}

    cleanupTests
}

# Local variables:
#    mode: tcl
#    tcl-indent-level: 4
#    indent-tabs-mode: nil
# End:
